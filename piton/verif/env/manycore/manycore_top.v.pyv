// Modified by Princeton University on June 9th, 2015
// ========== Copyright Header Begin ==========================================
//
// OpenSPARC T1 Processor File: cmp_top.v
// Copyright (c) 2006 Sun Microsystems, Inc.  All Rights Reserved.
// DO NOT ALTER OR REMOVE COPYRIGHT NOTICES.
//
// The above named program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License version 2 as published by the Free Software Foundation.
//
// The above named program is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this work; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.
//
// ========== Copyright Header End ============================================
////////////////////////////////////////////////////////

`ifndef USE_TEST_TOP // don't compile if user wants to use deprecated TOPs
`include "sys.h"
`include "iop.h"
`include "cross_module.tmp.h"
`include "ifu.tmp.h"
`include "define.tmp.h"
`include "piton_system.vh"


<%
    from pyhplib import *
%>

`ifdef PITON_DPI
import "DPI-C" function longint read_64b_call (input longint addr);
import "DPI-C" function void write_64b_call (input longint addr, input longint data);
import "DPI-C" function int drive_iob ();
import "DPI-C" function int get_cpx_word (int index);
import "DPI-C" function void report_pc (longint thread_pc);
import "DPI-C" function void init_jbus_model_call(string str, int oram);
`endif

`timescale 1ps/1ps
module cmp_top (
`ifdef VERILATOR
input reg                             core_ref_clk,

input reg                             sys_rst_n,

input reg                             pll_rst_n,

input reg                             clk_en,

input reg                             pll_bypass,
input reg [4:0]                       pll_rangea,
output wire                            pll_lock,
input reg [1:0]                       clk_mux_sel,
input reg                             async_mux,
input                                 diag_done,
input                                 ok_iob
`endif
);

//////////////////////
// Type Declarations
//////////////////////

`ifndef VERILATOR
reg                             core_ref_clk;
reg                             sys_rst_n;
reg                             pll_rst_n;
reg                             clk_en;
reg                             pll_bypass;
reg [4:0]                       pll_rangea;
wire                            pll_lock;
reg [1:0]                       clk_mux_sel;
reg                             async_mux;
// For simulation only, monitor stuff.  Only cross-module referenced
// do not delete.
reg                             diag_done;
`endif // ifndef VERILATOR

reg                             io_clk;
reg                             jtag_clk;
reg                             chipset_clk_osc_p;
reg                             chipset_clk_osc_n;
reg                             chipset_clk_osc;
reg                             chipset_clk;
reg                             mem_clk;
reg                             spi_sys_clk;
reg                             chipset_passthru_clk_p;
reg                             chipset_passthru_clk_n;
reg                             passthru_clk_osc_p;
reg                             passthru_clk_osc_n;
reg                             passthru_chipset_clk_p;
reg                             passthru_chipset_clk_n;

reg                             jtag_rst_l;

reg                             jtag_modesel;
reg                             jtag_datain;
wire                            jtag_dataout;


// For simulation only, monitor stuff.  Only cross-module referenced
// do not delete.
reg                             fail_flag;
reg [3:0]                       stub_done;
reg [3:0]                       stub_pass;

////////////////////
// Simulated Clocks
////////////////////

`ifndef VERILATOR
`ifndef USE_FAKE_PLL_AND_CLKMUX
always #5000 core_ref_clk = ~core_ref_clk;                      // 100MHz
`else
always #500 core_ref_clk = ~core_ref_clk;                       // 1000MHz
`endif
`endif

`ifndef SYNC_MUX
always #1429 io_clk = ~io_clk;                                  // 350MHz
`else
always @ * io_clk = core_ref_clk;
`endif

`ifndef VERILATOR
always #50000 jtag_clk = ~jtag_clk;                             // 10MHz

always #2500 chipset_clk_osc_p = ~chipset_clk_osc_p;            // 200MHz
always @ * chipset_clk_osc_n = ~chipset_clk_osc_p;

always #5000 chipset_clk_osc = ~chipset_clk_osc;                // 100MHz

always #2500 chipset_clk = ~chipset_clk;                        // 200MHz

always #3333 passthru_clk_osc_p = ~passthru_clk_osc_p;          // 150MHz
always @ * passthru_clk_osc_n = ~passthru_clk_osc_p;

always #1429 passthru_chipset_clk_p = ~passthru_chipset_clk_p;  // 350MHz
always @ * passthru_chipset_clk_n = ~passthru_chipset_clk_p;

always #1000 mem_clk = ~mem_clk;                                // 500MHz

always #25000 spi_sys_clk = ~spi_sys_clk;                       // 20MHz
`endif

////////////////////////////////////////////////////////
// SIMULATED BOOT SEQUENCE
////////////////////////////////////////////////////////

`ifndef VERILATOR
initial
begin
    // These are not referenced elsewhere in this module,
    // but are cross referenced from monitor.v.pyv.  Do not
    // delete
    fail_flag = 1'b0;
    stub_done = 4'b0;
    stub_pass = 4'b0;

    // Clocks initial value
    core_ref_clk = 1'b0;
    io_clk = 1'b0;
    jtag_clk = 1'b0;
    chipset_clk_osc_p = 1'b0;
    chipset_clk_osc_n = 1'b1;
    chipset_clk_osc = 1'b0;
    chipset_clk = 1'b0;
    mem_clk = 1'b0;
    spi_sys_clk = 1'b0;
    chipset_passthru_clk_p = 1'b0;
    chipset_passthru_clk_n = 1'b1;
    passthru_clk_osc_p = 1'b0;
    passthru_clk_osc_n = 1'b1;
    passthru_chipset_clk_p = 1'b0;
    passthru_chipset_clk_n = 1'b1;

    // Resets are held low at start of boot
    sys_rst_n = 1'b0;
    jtag_rst_l = 1'b0;
    pll_rst_n = 1'b0;

    // Mostly DC signals set at start of boot
    clk_en = 1'b0;
    if ($test$plusargs("pll_en"))
    begin
        // PLL is disabled by default
        pll_bypass = 1'b0; // trin: pll_bypass is a switch in the pll; not reliable
        clk_mux_sel[1:0] = 2'b10; // selecting pll
    end
    else
    begin
        pll_bypass = 1'b1; // trin: pll_bypass is a switch in the pll; not reliable
        clk_mux_sel[1:0] = 2'b00; // selecting ref clock
    end
    // rangeA = x10 ? 5'b1 : x5 ? 5'b11110 : x2 ? 5'b10100 : x1 ? 5'b10010 : x20 ? 5'b0 : 5'b1;
    pll_rangea = 5'b00001; // 10x ref clock
    // pll_rangea = 5'b11110; // 5x ref clock
    // pll_rangea = 5'b00000; // 20x ref clock

    // JTAG simulation currently not supported here
    jtag_modesel = 1'b1;
    jtag_datain = 1'b0;

`ifndef SYNC_MUX
    async_mux = 1'b1;
`else
    async_mux = 1'b0;
`endif

    // Init JBUS model plus some ORAM stuff
    if ($test$plusargs("oram"))
    begin
`ifndef PITON_DPI
        $init_jbus_model("mem.image", 1);
`else // ifndef PITON_DPI
        init_jbus_model_call("mem.image", 1);
`endif // ifndef PITON_DPI
`ifndef __ICARUS__
        force system.chip.ctap_oram_clk_en = 1'b1;
`endif
    end
    else
    begin
`ifndef PITON_DPI
        $init_jbus_model("mem.image", 0);
`else // ifndef PITON_DPI
        init_jbus_model_call("mem.image", 0);
`endif // ifndef PITON_DPI
    end


    // Reset PLL for 100 cycles
    repeat(100)@(posedge core_ref_clk);
    pll_rst_n = 1'b1;

    // Wait for PLL lock
    wait( pll_lock == 1'b1 );

    // After 10 cycles turn on chip-level clock enable
    repeat(10)@(posedge `CHIP_INT_CLK);
    clk_en = 1'b1;

    // After 100 cycles release reset
    repeat(100)@(posedge `CHIP_INT_CLK);
    sys_rst_n = 1'b1;
    jtag_rst_l = 1'b1;

    // Wait for SRAM init
    // trin: 5000 cycles is about the lowest for 64KB L2
    // 128KB L2 requires at least 10000
    repeat(5000)@(posedge `CHIP_INT_CLK); // trin: supports at least 512KB L2 per-tile

    diag_done = 1'b1;
`ifndef PITONSYS_IOCTRL
    // Signal fake IOB to send wake up packet to first tile
    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
`endif // endif PITONSYS_IOCTRL
end
`endif

`ifdef VERILATOR
always @(posedge ok_iob) begin
    cmp_top.system.chipset.chipset_impl.ciop_fake_iob.ok_iob = 1'b1;
end
`endif

////////////////////////////////////////////////////////
// SYNTHESIZABLE SYSTEM
// INCLUDES CHIP + CHIPSET (AND OPTIONAL PASSTHRU)
///////////////////////////////////////////////////////

system system(
`ifndef PITON_FPGA_SYNTH
    // I/O settings, just set to
    // fastest for simulation
    .chip_io_slew(1'b1),
    .chip_io_impsel(2'b11),
`endif // endif PITON_FPGA_SYNTH

    // Clocks and resets
`ifdef PITON_CLKS_SIM
    .core_ref_clk(core_ref_clk),
    .io_clk(io_clk),
`endif // endif PITON_CLKS_SIM

`ifdef PITONSYS_INC_PASSTHRU
`ifdef PITON_PASSTHRU_CLKS_GEN
    .passthru_clk_osc_p(passthru_clk_osc_p),
    .passthru_clk_osc_n(passthru_clk_osc_n),
`else // ifndef PITON_PASSTHRU_CLKS_GEN
    .passthru_chipset_clk_p(passthru_chipset_clk_p),
    .passthru_chipset_clk_n(passthru_chipset_clk_n),
`endif // endif PITON_PASSTHRU_CLKS_GEN
`endif // endif PITON_SYS_INC_PASSTHRU

`ifdef PITON_CHIPSET_CLKS_GEN
`ifdef PITON_CHIPSET_DIFF_CLK
    .chipset_clk_osc_p(chipset_clk_osc_p),
    .chipset_clk_osc_n(chipset_clk_osc_n),
`else // ifndef PITON_CHIPSET_DIFF_CLK
    .chipset_clk_osc(chipset_clk_osc),
`endif // endif PITON_CHIPSET_DIFF_CLK
`else // ifndef PITON_CHIPSET_CLKS_GEN
`ifndef VERILATOR
`ifdef PITON_EXTRA_MEMS
    .chipset_clk(core_ref_clk),
`elsif PITON_MANYGUI
    .chipset_clk(core_ref_clk),
`else
    .chipset_clk(chipset_clk),
`endif
`else
    .chipset_clk(core_ref_clk),
`endif
`ifndef PITONSYS_NO_MC
`ifdef PITON_FPGA_MC_DDR3
    .mc_clk(mem_clk),
`endif // endif PITON_FPGA_MC_DDR3
`endif // endif PITONSYS_NO_MC
`ifdef PITONSYS_SPI
    .spi_sys_clk(spi_sys_clk),
`endif // endif PITONSYS_SPI
`ifdef PITONSYS_INC_PASSTHRU
    .chipset_passthru_clk_p(chipset_passthru_clk_p),
    .chipset_passthru_clk_n(chipset_passthru_clk_n),
`endif // endif PITONSYS_INC_PASSTHRU
`endif // endif PITON_CHIPSET_CLKS_GEN

    .sys_rst_n(sys_rst_n),

    // Piton chip specific
`ifndef PITON_FPGA_SYNTH
    .pll_rst_n(pll_rst_n),
`endif // endif PITON_FPGA_SYNTH

`ifndef PITON_FPGA_SYNTH
    // Chip level clock enable
    .clk_en(clk_en),
`endif // endif PITON_FPGA_SYNTH

`ifndef PITON_FPGA_SYNTH
    // Chip PLL settings
    .pll_bypass(pll_bypass),
    .pll_rangea(pll_rangea),
    .pll_lock(pll_lock),
`endif // endif PITON_FPGA_SYNTH

`ifndef PITON_FPGA_SYNTH
    // Chip clock mux selection (bypass PLL or not)
    .clk_mux_sel(clk_mux_sel),
`endif // endif PITON_FPGA_SYNTH

`ifndef PITON_NO_JTAG
    // Chip JTAG
    .jtag_clk(jtag_clk),
    .jtag_rst_l(jtag_rst_l),
    .jtag_modesel(jtag_modesel),
    .jtag_datain(jtag_datain),
    .jtag_dataout(jtag_dataout),
`endif  // endif PITON_NO_JTAG

`ifndef PITON_NO_CHIP_BRIDGE
    // Chip async FIFOs enable for
    // bridign core<->io clk domain
    .async_mux(async_mux),
`endif // endif PITON_FPGA_SYNTH

    // DRAM and I/O interfaces
`ifndef PITONSYS_NO_MC
`ifdef PITON_FPGA_MC_DDR3
    // FPGA DDR MC interface, currently not supported in simulation
    .init_calib_complete(),
    .ddr_addr(),
    .ddr_ba(),
    .ddr_cas_n(),
    .ddr_ck_n(),
    .ddr_ck_p(),
    .ddr_cke(),
    .ddr_ras_n(),
    .ddr_reset_n(),
    .ddr_we_n(),
    .ddr_dq(),
    .ddr_dqs_n(),
    .ddr_dqs_p(),
    .ddr_cs_n(),
    .ddr_dm(),
    .ddr_odt(),
`endif // endif PITON_FPGA_MC_DDR3
`endif // endif PITONSYS_NO_MC

`ifdef PITONSYS_IOCTRL
`ifdef PITONSYS_UART
    // UART interface for bootloading and
    // serial port interface.  Currently
    // not supported in simulation
    .uart_tx(),
    .uart_rx(),
`endif // endif PITONSYS_UART

`ifdef PITONSYS_SPI
    // SPI interface for boot device and disk.
    // Currently not supported in simulation
    .spi_data_in(),
    .spi_data_out(),
    .spi_clk_out(),
    .spi_cs_n(),
`endif // endif PITONSYS_SPI
`endif // endif PITONSYS_IOCTRL

    // Switches
`ifdef PITON_NOC_POWER_CHIPSET_TEST
    .sw({4'bz, 4'd`PITON_NOC_POWER_CHIPSET_TEST_HOP_COUNT}),
`else // ifndef PITON_NOC_POWER_CHIPSET_TEST
    .sw(
`ifdef PITONSYS_IOCTRL
    `ifdef PITONSYS_UART
        `ifdef PITONSYS_UART_BOOT
          {1'b1, 7'bz} // applying uart_boot_en signal
        `endif // endif PITONSYS_UART_BOOT
    `endif // endif PITONSYS_UART
`endif // endif PITONSYS_IOCTRL
    ),
`endif // endif PITON_NOC_POWER_CHIPSET_TEST

    // Do not provide any functionality
    .leds()
);

////////////////////////////////////////////////////////
// MONITOR STUFF
////////////////////////////////////////////////////////
<%
for core_id in range(PITON_NUM_TILES) :
    print("`define CORE_%d system.chip.tile%d.g_lagarto_m20_core.core" %(core_id, core_id))
%>

`ifdef VPU_ENABLE
<%
for core_id in range(PITON_NUM_TILES) :
    print("`define VPU_%d `CORE_%d.lagarto_m20.vpu_inst" %(core_id, core_id))
%>
`endif // endif VPU_ENABLE

`ifdef MEEP_COSIM
<%
print("    spike_setup #(.NUM_CORES(%d)) spike_cosim_setup();" %(PITON_NUM_TILES))

for core_id in range(PITON_NUM_TILES) :
    print("""
    spike_scoreboard spike_scoreboard_core{coreid} (.clk            (core_ref_clk),
                                             .rst            (sys_rst_n),
                                             .commit         (`CORE_{coreid}.lagarto_m20.datapath_inst.commit_valid),
                                             .pc             (`CORE_{coreid}.lagarto_m20.datapath_inst.commit_pc),
                                             .wb_stage       (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_to_wb_wb),
                                             .xreg_dest      (`CORE_{coreid}.lagarto_m20.datapath_inst.commit_addr_reg),
                                             .cu_rr_int      (`CORE_{coreid}.lagarto_m20.datapath_inst.cu_rr_int),
                                             .commit_data    (`CORE_{coreid}.lagarto_m20.datapath_inst.commit_data),
                                             .excep          (`CORE_{coreid}.lagarto_m20.datapath_inst.wb_xcpt),
                                             .xreg_1         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[1]),
                                             .xreg_2         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[2]),
                                             .xreg_3         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[3]),
                                             .xreg_4         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[4]),
                                             .xreg_5         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[5]),
                                             .xreg_6         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[6]),
                                             .xreg_7         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[7]),
                                             .xreg_8         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[8]),
                                             .xreg_9         (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[9]),
                                             .xreg_10        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[10]),
                                             .xreg_11        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[11]),
                                             .xreg_12        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[12]),
                                             .xreg_13        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[13]),
                                             .xreg_14        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[14]),
                                             .xreg_15        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[15]),
                                             .xreg_16        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[16]),
                                             .xreg_17        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[17]),
                                             .xreg_18        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[18]),
                                             .xreg_19        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[19]),
                                             .xreg_20        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[20]),
                                             .xreg_21        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[21]),
                                             .xreg_22        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[22]),
                                             .xreg_23        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[23]),
                                             .xreg_24        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[24]),
                                             .xreg_25        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[25]),
                                             .xreg_26        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[26]),
                                             .xreg_27        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[27]),
                                             .xreg_28        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[28]),
                                             .xreg_29        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[29]),
                                             .xreg_30        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[30]),
                                             .xreg_31        (`CORE_{coreid}.lagarto_m20.datapath_inst.rr_stage_inst.registers[31]),
                                             .csr_excep      (`CORE_{coreid}.i_csr_regfile.csr_exception_o),
                                             .csr_cause      (`CORE_{coreid}.i_csr_regfile.csr_xcpt_cause),
                                             .control_intf   (`CORE_{coreid}.lagarto_m20.datapath_inst.control_int),
`ifdef VPU_ENABLE
                                             .vpu_resp       (`CORE_{coreid}.lagarto_m20.datapath_inst.resp_vpu_cpu_i),
`else
                                             .vpu_resp       ('b0),
`endif
                                             .hart_id        (`CORE_{coreid}.hart_id_i),
                                             .ref_hart_id    (64'd{coreid}),
                                             .csr_mip        (`CORE_{coreid}.i_csr_regfile.mip_q),
                                             .csr_vsew       (`CORE_{coreid}.i_csr_regfile.csr_vsew),
                                             .csr_vl         (`CORE_{coreid}.i_csr_regfile.csr_vl));
    """.format(coreid = core_id))
%>

`endif

// Lagarto coverage instance for ISA coverage
`ifdef PITON_COVERAGE
// `ifndef PITON_LAGARTO_TILE
<%
for core_id in range(PITON_NUM_TILES) :
  print("""
cov_isa cov_isa_inst{coreid}(.i_clk            (core_ref_clk),
                            .i_rsn            (sys_rst_n),
                            .i_valid          (`CORE_{coreid}.lagarto_m20.datapath_inst.valid_wb),
                            .i_instruction    (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_to_wb_wb.inst_orig)
                            );
  """.format(coreid = core_id))
%>
// `endif // endif PITON_LAGARTO_TILE

// Lagarto coverage instance for RISC-V Privilege ISA coverage
<%
for core_id in range(PITON_NUM_TILES) :
  print("""
cov_priv_isa cov_priv_isa_inst{coreid}(.i_clk             (core_ref_clk),
                            .i_rsn              (sys_rst_n),
                            .i_valid            (`CORE_{coreid}.lagarto_m20.datapath_inst.valid_wb),
                            .i_instruction      (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_to_wb_wb.inst_orig),
                            .i_mstatus          (`CORE_{coreid}.i_csr_regfile.mstatus_d),
                            .i_mcause           (`CORE_{coreid}.i_csr_regfile.mcause_d),
                            .i_scause           (`CORE_{coreid}.i_csr_regfile.scause_d),
                            .i_mtvec            (`CORE_{coreid}.i_csr_regfile.mtvec_d),
                            .i_stvec            (`CORE_{coreid}.i_csr_regfile.stvec_d),
                            .i_mideleg          (`CORE_{coreid}.i_csr_regfile.mideleg_d),
                            .i_medeleg          (`CORE_{coreid}.i_csr_regfile.medeleg_d),
                            .i_csr_addr         (`CORE_{coreid}.i_csr_regfile.csr_addr_i),
                            .i_csr_cmd          (`CORE_{coreid}.i_csr_regfile.csr_op_i),
                            .i_priv_lvl         (`CORE_{coreid}.i_csr_regfile.priv_lvl_o),
                            .i_pipeline_exc     (`CORE_{coreid}.i_csr_regfile.ex_i),
                            .i_csr_exc          (`CORE_{coreid}.i_csr_regfile.csr_exception_o),
                            .i_int              (`CORE_{coreid}.i_csr_regfile.ex_i),
                            .i_instr_type       (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_to_wb_wb.instr_type));
  """.format(coreid = core_id))
%>

// Lagarto coverage instance for frontend of the core (fetch, decode, read register)
<%
for core_id in range(PITON_NUM_TILES) :
  print("""
cov_frontend cov_frontend_inst{coreid}(.clk_i                       (core_ref_clk),
                                       .rsn_i                       (sys_rst_n),
                                       .en_translation_i            (`CORE_{coreid}.lagarto_m20.datapath_inst.if_stage_inst.en_translation_i),
                                       .en_ld_st_translation_i      (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.en_ld_st_translation_i),
                                       .iaccess_err                 (`CORE_{coreid}.lagarto_m20.i_mmu.iaccess_err),
                                       .priv_lvl_i                  (`CORE_{coreid}.lagarto_m20.i_mmu.priv_lvl_i),
                                       .icache_areq_o               (`CORE_{coreid}.lagarto_m20.i_mmu.icache_areq_o),
                                       .icache_areq_i               (`CORE_{coreid}.lagarto_m20.i_mmu.icache_areq_i),
                                       .match_any_execute_region    (`CORE_{coreid}.lagarto_m20.i_mmu.match_any_execute_region),
                                       .pte_lookup                  (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.state_q == PTE_LOOKUP? 1'b1 : 1'b0),
                                       .data_rvalid_q               (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.data_rvalid_q),
                                       .pte                         (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.pte),
                                       .walking_instr               (`CORE_{coreid}.lagarto_m20.i_mmu.walking_instr),
                                       .ptw_lvl_1                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL1? 1'b1 : 1'b0),
                                       .ptw_lvl_2                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL2? 1'b1 : 1'b0),
                                       .ptw_lvl_3                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL3? 1'b1 : 1'b0),
                                       .cl_hit                      (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.cl_hit),
                                       .icache_miss                 (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.miss_o),
                                       .icache_flush                (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.flush_i),
                                       .icache_fill_return          (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.mem_rtrn_vld_i),
                                       .itlb_hit                    (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.itlb_hit_i),
                                       .dtlb_hit                    (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.dtlb_hit_i),
                                       .itlb_miss                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.itlb_miss_o),
                                       .itlb_flush                  (`CORE_{coreid}.lagarto_m20.i_mmu.i_itlb.flush_i),
                                       .itlb_fill_return            (`CORE_{coreid}.lagarto_m20.i_mmu.i_itlb.update_i.valid),
                                       .exe_cu_i                    (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.exe_cu_i),
                                       .pipeline_ctrl_int           (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.pipeline_ctrl_int),
                                       .correct_branch_pred_i       (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.correct_branch_pred_i),
                                       .id_cu_i                     (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.id_cu_i),
                                       .csr_cause                   (`CORE_{coreid}.lagarto_m20.CSR_CAUSE),
                                       .csr_excpt_intrpt            (`CORE_{coreid}.lagarto_m20.CSR_EXCEPTION),
                                       .interrupt_pending           (`CORE_{coreid}.i_csr_regfile.interrupt_o),
                                       .ifu_dispatch_valid          (`CORE_{coreid}.lagarto_m20.datapath_inst.valid_if),
                                       .itlb_tags_q                 (`CORE_{coreid}.lagarto_m20.i_mmu.i_itlb.tags_q),
                                       .itlb_lu_hit                 (`CORE_{coreid}.lagarto_m20.i_mmu.i_itlb.lu_hit),
                                       .itlb_access_i               (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.itlb_access_i),
                                       .dtlb_access_i               (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.dtlb_access_i),
                                       //.is_branch_table_valid       (`CORE_{coreid}.lagarto_m20.datapath_inst.if_stage_inst.brach_predictor_inst.is_branch_table_valid),
                                       .branch_at_exu               (`CORE_{coreid}.lagarto_m20.datapath_inst.if_stage_inst.brach_predictor_inst.bimodal_predictor_inst.is_branch_EX_i),
                                       .pc_execution_i              (`CORE_{coreid}.lagarto_m20.datapath_inst.if_stage_inst.brach_predictor_inst.bimodal_predictor_inst.pc_execution_i),
                                       .paddr_is_nc                 (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.paddr_is_nc),
                                       .cache_en_q                  (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.cache_en_q)              
                                      );
  """.format(coreid = core_id))
%>

// Lagarto coverage instance for backend of the core (exu/lsu, wb/commit/CSR)
<%
for core_id in range(PITON_NUM_TILES) :
  print("""
cov_backend cov_backend_inst{coreid}(.clk_i                          (core_ref_clk),
                                      .rsn_i                         (sys_rst_n),
                                      .resp_dcache_cpu_i             (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.resp_dcache_cpu_i),
                                      .en_translation_i              (`CORE_{coreid}.lagarto_m20.datapath_inst.if_stage_inst.en_translation_i),
                                      .en_ld_st_translation_i        (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.en_ld_st_translation_i),
                                      .from_rr_i                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.from_rr_i),
                                      .to_wb_o                       (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.to_wb_o),
                                      .csr_interrupt_i               (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.csr_interrupt_i),
                                      .exe_to_wb_wb                  (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_to_wb_wb),
                                      .daccess_err                   (`CORE_{coreid}.lagarto_m20.i_mmu.daccess_err),
                                      .ld_st_priv_lvl_i              (`CORE_{coreid}.lagarto_m20.i_mmu.ld_st_priv_lvl_i),
                                      .lsu_exception_o               (`CORE_{coreid}.lagarto_m20.i_mmu.lsu_exception_o),
                                      .dtlb_hit_q                    (`CORE_{coreid}.lagarto_m20.i_mmu.dtlb_hit_q),
                                      .lsu_req_q                     (`CORE_{coreid}.lagarto_m20.i_mmu.lsu_req_q),
                                      .lsu_is_store_q                (`CORE_{coreid}.lagarto_m20.i_mmu.lsu_is_store_q),
                                      .dtlb_pte_q                    (`CORE_{coreid}.lagarto_m20.i_mmu.dtlb_pte_q),
                                      .ptw_active                    (`CORE_{coreid}.lagarto_m20.i_mmu.ptw_active),
                                      .walking_instr                 (`CORE_{coreid}.lagarto_m20.i_mmu.walking_instr),
                                      .ptw_error                     (`CORE_{coreid}.lagarto_m20.i_mmu.ptw_error),
                                      .pte_lookup                    (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.state_q == PTE_LOOKUP? 1'b1 : 1'b0),
                                      .data_rvalid_q                 (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.data_rvalid_q),
                                      .pte                           (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.pte),
                                      .lsu_is_store_i                (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.lsu_is_store_i),
                                      .mxr_i                         (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.mxr_i),
                                      .ptw_lvl_1                     (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL1? 1'b1 : 1'b0),
                                      .ptw_lvl_2                     (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL2? 1'b1 : 1'b0),
                                      .ptw_lvl_3                     (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.ptw_lvl_q == LVL3? 1'b1 : 1'b0),
                                      .dtlb_tags_q                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_dtlb.tags_q),
                                      .dtlb_flush                    (`CORE_{coreid}.lagarto_m20.i_mmu.i_dtlb.flush_i),
                                      .itlb_access_i                 (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.itlb_access_i),
                                      .dtlb_access_i                 (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.dtlb_access_i),
                                      .itlb_hit                      (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.itlb_hit_i),
                                      .dtlb_hit                      (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.dtlb_hit_i),
                                      .dtlb_lu_hit                   (`CORE_{coreid}.lagarto_m20.i_mmu.i_dtlb.lu_hit),
                                      .dcache_en_i                   (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.cache_en),
                                      .paddr_is_nc                   (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.miss_nc),
                                      .exe_cu_i                      (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.exe_cu_i),
                                      .pipeline_ctrl_int             (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.pipeline_ctrl_int),
                                      .correct_branch_pred_i         (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.correct_branch_pred_i),
                                      .id_cu_i                       (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.id_cu_i),
                                      .csr_cause                     (`CORE_{coreid}.lagarto_m20.CSR_CAUSE),
                                      .csr_excpt_intrpt              (`CORE_{coreid}.lagarto_m20.CSR_EXCEPTION),
                                      .icache_flush                  (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_icache.flush_i),
                                      .interrupt_pending             (`CORE_{coreid}.i_csr_regfile.interrupt_o),
                                      .miss_req                      (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.miss_req),
                                      .rd_hit_oh                     (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.rd_hit_oh),
                                      .dcache_rd_req                 (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.rd_req),
                                      .mem_rtrn_vld_i                (`CORE_{coreid}.lagarto_m20.i_cache_subsystem.i_wt_dcache.mem_rtrn_vld_i),
                                      .dtlb_miss                     (`CORE_{coreid}.lagarto_m20.i_mmu.i_ptw.dtlb_miss_o),
                                      .dtlb_fill_return              (`CORE_{coreid}.lagarto_m20.i_mmu.i_dtlb.update_i.valid),
                                      .pmu_flags_o                   (`CORE_{coreid}.lagarto_m20.datapath_inst.pmu_flags_o),
                                      .stall_mul                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.stall_mul),
                                      .stall_div                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.stall_div),
                                      .stall_mem                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.stall_mem),
                                      .stall_fpu                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.stall_fpu),
                                      .stall_o                       (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.stall_o),
                                      .from_wb_i                     (`CORE_{coreid}.lagarto_m20.datapath_inst.exe_stage_inst.from_wb_i),
                                      .pipeline_flush_o              (`CORE_{coreid}.lagarto_m20.datapath_inst.control_unit_inst.pipeline_flush_o)
                                      );
  """.format(coreid = core_id))
%>
`endif // endif PITON_COVERAGE

`ifndef DISABLE_ALL_MONITORS

    // this is the T1 sparc core monitor
    monitor   monitor(
        .clk    (`CHIP_INT_CLK),
        .cmp_gclk  (`CHIP_INT_CLK),
        .rst_l     (`CHIP.rst_n_inter_sync)
        );

`ifndef MINIMAL_MONITORING
    integer j;

    // Tri: slam init is taken out because it's too complicated to extend to 64 cores
    // slam_init slam_init () ;

    // The only thing that we will "slam init" is the integer register file
    //  and it is randomized. For some reason if we left it as X's some tests will fail
    <%
        t = '''
        `ifdef OST1_PLI_SLAM_RANDOM
        `ifdef RTL_SPARC0
        initial begin
            $slam_random(`SPARC_REG0.bw_r_irf_core.register01.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register02.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register03.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register04.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register05.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register06.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register07.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register08.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register09.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register10.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register11.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register12.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register13.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register14.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register15.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register16.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register17.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register18.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register19.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register20.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register21.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register22.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register23.bw_r_irf_register.window, 16, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register24.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register25.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register26.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register27.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register28.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register29.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register30.bw_r_irf_register.window, 8, 0);
            $slam_random(`SPARC_REG0.bw_r_irf_core.register31.bw_r_irf_register.window, 8, 0);
        end
        `endif
        `endif
        '''

        for i in range(PITON_NUM_TILES) :
            tt = t.replace('SPARC_REG0', 'SPARC_REG%d' % i)
            tt = t.replace('RTL_SPARC0', 'RTL_SPARC%d' % i)
            print(tt)
    %>

`ifndef VERILATOR
    // T1's TSO monitor, stripped of all L2 references
    tso_mon tso_mon(`CHIP_INT_CLK, `CHIP.rst_n_inter_sync);
`endif

    // L15 MONITORS
    cmp_l15_messages_mon l15_messages_mon(
        .clk (`CHIP_INT_CLK)
        );

    // DMBR MONITOR
    dmbr_mon dmbr_mon (
        .clk(`CHIP_INT_CLK)
     );

    //L2 MONITORS
    `ifdef FAKE_L2
    `else
    l2_mon l2_mon(
        .clk (`CHIP_INT_CLK)
    );
    `endif

    //only works if clk == chipset_clk
    //async_fifo_mon async_fifo_mon(
    //   .clk (core_ref_clk)
    //);

    jtag_mon jtag_mon(
        .clk (jtag_clk)
        );

    `ifndef PITONSYS_IOCTRL
    iob_mon iob_mon(
        .clk (chipset_clk)
    );
    `endif
    // sas, more debug info

    // turn on sas interface after a delay
//    reg   need_sas_sparc_intf_update;
//    initial begin
//        need_sas_sparc_intf_update  = 0;
//        #12500;
//        need_sas_sparc_intf_update  = 1;
//    end // initial begin

`ifdef PITON_OST1
    sas_intf  sas_intf(/*AUTOINST*/
        // Inputs
        .clk       (`CHIP_INT_CLK),      // Templated
        .rst_l     (`CHIP.rst_n_inter_sync));       // Templated
`endif

`ifdef PITON_OST1
    // create sas tasks
    sas_tasks sas_tasks(/*AUTOINST*/
        // Inputs
        .clk      (`CHIP_INT_CLK),      // Templated
        .rst_l        (`CHIP.rst_n_inter_sync));       // Templated
`endif

`ifdef PITON_OST1
    // sparc pipe flow monitor
    sparc_pipe_flow sparc_pipe_flow(/*AUTOINST*/
        // Inputs
        .clk  (`CHIP_INT_CLK));         // Templated
`endif

    manycore_network_mon network_mon (`CHIP_INT_CLK);

    my_network_mon my_network_monitor (`CHIP_INT_CLK);
    
    my_mon #(`PITON_NUM_TILES) my_monitor (
        .clk (`CHIP_INT_CLK));//,

`endif // MINIMAL_MONITORING
`endif // DISABLE_ALL_MONITORS
    // Alexey
    // UART monitor
    /*reg      prev_tx_state;
    always @(posedge core_ref_clk)
        prev_tx_state <= tx;

    always @(posedge core_ref_clk)
        if (prev_tx_state != tx) begin
            $display("UART: TX changed to %d at", tx, $time);
        end*/

endmodule // cmp_top

`endif
